
The other day @light_industry turned me onto tmsu, a program that lets you assign tags to files in your file system. Then you can retrieve files by tag, and create a virtual file system that reflects tag structure instead of the hierarchical tree structure that we've been stuck with. 

Hierarchies are for dead trees and chimpanzees. 

** Dependencies

   What I'm doing now will require that tmsu is installed. If what I do is not garbage, then I will refactor things using protocols, and tmsu will just be one particular implementation of the protocol. I'd like to additionally have implementations for pinboard.in, so that I can bring the same techniques to my bookmarks, and my goodreads account, so that I can do similar analysis of my books.  

** Away from Trees and Toward Sheaves
   
I like real trees, the ones that are plants. 

I'm opposed to fake trees, the ones that are data structures representing hierarchical information. If you have a book made out of a dead tree and you want to file it, then you have to put it in a library and a building in that library and a wing in that building and a floor of that wing and a room on that floor and a case in that room and a shelf in that case. If the book is an algebra book then it goes in the algebra section; if the book is a topology book then it goes in the topology section. So what do you do when it's an algebraic topology book? In a tree structure you're in trouble. But if you can 'tag' a digital book as being about 'algebra' and also being about 'topology,' then you're golden. 

A tagging structure, or folksonomy, is not a tree. Instead, such a structure is an 'abstract simplicial complex,' or ASC for short. 

Here's where we're headed: a *sheaf* is a structure in which we take a topological space, such as an abstract simplicial complex equipped with the Txxxxx topology, and assign to every open set (or was it point?) another space, and between those spaces we require an appropriate map that 'respects' the topology. This is all a bit abstract, so I'm going to attempt to implement a few sheaves over the files in my file system, using the tmsu ('tag my stuff up') program, which permits you to assign simple tags, or tags with values, to files in an ordinary unix file system. 

Suppose you have a data set that is a collection of items, plus the keywords that you've tagged those items with. Note that if some item $i$ is tagged with the set of keywords { $k$, $l$, $m$ }, then it is certainly tagged with the individual keywords $k$, $l$, or $m$, or any of the pairs of these keywords. This is enough of a requirement that a tagging structure is more restricted than some arbitrary hypergraph, and it is in fact an ASC, the key requirement of which is, if a simplex $s$ is in the ASC, then all the *faces*, or subsets, of $s$, are also in the ASC.

** Ground Set: The vocabulary of keywords

The *ground set* of a simplicial complex is the set of 0-simplices. For us, this is the set of keywords that are used at least once to tag something in our collection of items. 
   
#+BEGIN_SRC clojure 
  
  (require '[me.raynes.conch :refer [programs]])

  (programs tmsu)

  (def ground-set 
    (tmsu "tags" {:seq true}))

  (def v ground-set)

  (def labels ground-set)

#+END_SRC

"Why not go through the SQL interface of the database that tmsu creates?" Uh b/c this was the first thing I thought of. 

** Data Set: The list of files

The data that we've labeled. 

#+BEGIN_SRC clojure

(def items (tmsu "files" {:seq true}))

#+END_SRC

** The n-simplexes

(If we're speaking Greek we should say 'n-simplices' but, we're not speaking Greek, so I write simplexes. Except when I don't.)

An subset S of the ground set is a simplex in our tmsu asc iff there is a nonempty set of files tagged with S. But combinatorial explosions prohibit us from checking every subset of the ground set. Instead, we'll get every file's label set, and use that collection as a basis.

#+BEGIN_SRC clojure

(def base-simplices-by-items
  (->> items
       (mapcat (fn [f] (tmsu "tags" f {:seq true})))
       (map #(clojure.string/split % #": "))
       (map (juxt first #(clojure.string/split (second %) #" " )))
       (into {})))

(def base-simplices (vals base-simplices-by-items))

(def asc
  (map set (set (mapcat subsets base-simplices))))

#+END_SRC

I find myself tiptoeing around in fear of combinatorial explosion. Get a grip: no file is going to be labeled with more than 10 tags, really, and 2^10 is about 10^3, which is no big deal to compute. Focus on constructing the ASC and its attachment relation, and your stalk function will call out to tmsu or its db.

** The attachment diagram

The attachment diagram shows how the simplices fit together. It's the 'transitive reduction' of the inclusion order, also known as the 'covering relation': x and y in our set system S are related iff x is a subset of y, but there is no other set z in S with x < z < y.

Let S be a poset. For x and y in S, y *covers* x iff x < y and there is no element z such that x < z < y.

#+BEGIN_SRC clojure

  (defn covers? [S y x]
    (and (subset? x y)
         (not (some (fn [z] (and subset? x z) (subset? z y)) S))))

#+END_SRC

Again, I think that I need to not prematurely optimize -- my sets are small. I can go back over this and use matrices if it gets slow.

Alas, to my surprise, this is not a correct implementation of a =covers?= function. To my further surprise, the problem is not that =subset?= is true for improper subsets. Hm....

#+BEGIN_SRC clojure

(def set-system #{ #{:x} #{:x :y} #{:x :y :z}})

(def a #{:x})

(def b #{:x :y})

(def c #{:x :y :z})

(def expected-attachment-diagram
  "Note that #{:x} is not directly attached to #{:x :y :z}"
  #{ [#{:x} #{:x :y}] [#{:x :y} #{:x :y :z}]})

;; Attachment diagram
;; ==================
(defn proper-subset? [x y]
  (and (subset? x y) (not= x y)))

(defn covers? [S x y]
  (and (proper-subset? x y)
       (not (some (fn [z] (and (proper-subset? x z) (proper-subset? z y))) S))))

(is (subset? a b))

(is (subset? a c))

(is (proper-subset? a b))

(is (not (proper-subset? b b) ))

(is (covers? set-system b a)) ; FAIL

(not (some (fn [z] (and (proper-subset? b z) (proper-subset? z c))) set-system) )

(covers? set-system c a)

(covers? set-system c b)

;; whyyyyyy

(is (covers? set-system b a))

;; whyyyyyyyyyyyyyyyyyyyyyyyyyyy

(is (not (covers? set-system c a)))








#+END_SRC

And, here's the beginning of my attempt at defining the attachment diagram, which I stopped working on once I realized that =covers?= isn't working.


#+BEGIN_SRC clojure

;; Let's just have a vector of every edge, and if that's inefficient, fix it later.

(->> (cartesian-product complex complex)
     (filter #(covers? complex (first %) (second %)))
     )

#+END_SRC

** Topologizing the attachment diagram

The n-simplices are just the points of a topology. We need also to define open sets. From Robinson's lecture, I'll define the Tarkovsky (or was it someone else with a 'T' name?) topology.

#+BEGIN_SRC clojure

(defn star [x]
  (filter (partial subset? (if (set? x) x #{ x } )) complex))

#+END_SRC

A couple test cases from my tiny ambient data set...

#+BEGIN_SRC clojure

(star #{"resistance"})
;=> (#{"resistance"})

(star #{"money"})
;=> (#{"money"} #{"btc" "money"}

#+END_SRC



* TO DO

Implement or synthesize the following ramblings...

** Cosheaves?

You know I'm looking at some of Robinson's slides and it may be the case that I've got a cosheaf, because I'm going top-down. I'm not sure. I might not be sure until I figure out which direction extension goes: do things get bigger or smaller? 

** From ASCs to sheaves

   > The sheaf of Xs over Y.

   A sheaf consists of an assignation of spaces to the points of a topological space, such that there are maps between the spaces in a manner consistent with the topological structure.^[Technically, for a while we'll be making presheaves, and not caring about the additional property we'd need to verify to see if it's a sheaf. But the property won't become important until a later point in the construction so I'm not going to sweat the difference.]

   Let C be the collection of subsets S of the ground set V such that S is a set tagging some item i in our collection I of items. What we're going to do is, form a category, where the objects are the sets in C and all of their subsets, and the morphisms are the inclusion maps turned backwards. 

   In the last section we got a set of tuples where the first component is the name of a file and the second is the tag-sets that tag that file. Instead we want the map from sets of tags to sets of files. 

** The stalks

   What if we thought of the stalks as the image of a stalk function? We could have the 'item stalk' as identity, but then other stalks as different transformations of the items. 

*** Stalk functions
    
def stalk-of-files
def stalk-of-writings
def stalk-of-word-counts
def stalk-of-word-vectors
def stalk-of-bookmarks
def stalk-of-contacts

    The sheaf of item sets over the keywords ASC (kASC for short).

    tmsu files t

    The sheaf of text files over the kASC.

    ->> tmsu files t
    filter mimetype "text", or maybe filter file-extension "org"

    The sheaf of word counts over the kASC.

    ->> tmsu files t
    filter mimetype "text", or maybe filter file-extension "org"
    map wc

The sheaf of modification (creation) times over the kASC.
    ->> tmsu files t
    filter mimetype "text", or maybe filter file-extension "org"
    map getCreationTime / getModifiedTime

(I don't think that one's going to be all that well-defined tbh. I guess it's the set of modification times, which I don't expect to do us any good. But you never know).)

A function that, given a set of keywords, get the set of files. 
A function that, given a set of keywords, gets the count of the set of files.
A function that makes a map indexed by the sets of keywords, where the values are...
- the files tagged thusly
- the count of the files tagged thusly
- the timestamps of the files tagged thusly

The sheaf of files (over the ASC).
The sheaf of file counts.
The sheaf of only text files.
The sheaf of only programs (directories containing a src directory).
The sheaf of word counts of text files.
The sheaf of bags-of-words of text files.
The sheaf of last-modified or created times.

** The maps; global and local sections

   The file set presheaf ought to be a sheaf by the obvious inclusion maps. The word count presheaf, that probably becomes a sheaf under some appropriately chosen sum function. I don't know what we'll find in other sheaves. Maybe there will be a nice structure in the bag-of-words sheaf?

Anyway, once you've got some real presheaves defined, I expect that we'll be able to do some global and local section shenanigans. That is, if you take some choice of point in each stalk, and it does or does not follow some consistency rules for maps between stalks, that means something. Something I don't remember right now. You have functions to write, go on. 

** Future 
*** Using protocols

 Remember when I said, 

 > An subset S of the ground set is a simplex in our tmsu asc iff there is a nonempty set of files tagged with S.

 So you could define the tmsu-asc of keywords and files. But you could also define the pinboard-asc of keywords and pinboard cards or the URLs they point to.

 I don't want to overabstract prematurely, though. Parameterize over data sources later.
*** New Complexes

 Bringing in additional data sources: 

 The sheaf of sets of bookmarks
 The sheaf of only the URLs.
 The sheaf of only tweets.
 The sheaf of users who tweeted or retweeted a thing (yeah right)

** User Stories

   I was thinking about the user interface to this thing first. Some things the user and/or the system should be able to do. (This is probably garbage but I needed a warmup):


Tag a file

Tag a sequence of files

List files from tags

Get tag vocabulary

Get all subsets of the tag vocabulary

Get the subsets that have nonzero sizes of files

Okay now I have to write a bit. 


The sequence of descending subsets is 
all subsets of V
filtered by
> (f %) 0 
where f 
is open to being chosen later. 

One obvious f is, 
the suze of the set of files that satisfy the vectof tags with an implicit and. 

You'll want a human interface, for the repl. 

defn tag file tags
with-program
"tmsu"
"tmsu" "tag" file tags

defn items tags
with-program
"tmsu"
"tmsu" "files" tags
